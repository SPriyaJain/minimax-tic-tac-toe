/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tictactoegui;

import java.awt.Color;
import static java.awt.image.ImageObserver.WIDTH;
import javax.swing.JOptionPane;
import static tictactoegui.Utils.duplicateBoard;
import static tictactoegui.Utils.isFull;

/**
 *
 * @author 531663
 */
public class NewJFrame extends javax.swing.JFrame {
    //private int gameMethod;
    
    /**
     * Creates new form NewJFrame
     */
    
    //initalize board
    String[][] board = new String[3][3];
    
    public NewJFrame() {
        initComponents();
        
        getContentPane().setBackground(new Color(204, 204, 255));

        
        //automatically against computer if player does not choose
        if (gameMethod == 0) {
            lblP1Score.setText("Player 1");
            lblP2Score.setText("Player 2");
        }
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                board[row][col] = " ";
            }
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NXT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        txt00 = new javax.swing.JTextField();
        txt10 = new javax.swing.JTextField();
        txt20 = new javax.swing.JTextField();
        txt01 = new javax.swing.JTextField();
        txt21 = new javax.swing.JTextField();
        txt02 = new javax.swing.JTextField();
        txt11 = new javax.swing.JTextField();
        txt22 = new javax.swing.JTextField();
        txt12 = new javax.swing.JTextField();
        txtMessage = new javax.swing.JTextField();
        lblP1Score = new javax.swing.JLabel();
        lblP2Score = new javax.swing.JLabel();
        txtP1Score = new javax.swing.JTextField();
        txtP2Score = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        lblTitle.setFont(new java.awt.Font("Lucida Handwriting", 0, 18)); // NOI18N
        lblTitle.setText("Tic Tac Toe");

        txt00.setEditable(false);
        txt00.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txt00.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt00.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt00MouseClicked(evt);
            }
        });

        txt10.setEditable(false);
        txt10.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txt10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt10MouseClicked(evt);
            }
        });

        txt20.setEditable(false);
        txt20.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txt20.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt20MouseClicked(evt);
            }
        });

        txt01.setEditable(false);
        txt01.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txt01.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt01.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt01MouseClicked(evt);
            }
        });

        txt21.setEditable(false);
        txt21.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txt21.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt21MouseClicked(evt);
            }
        });

        txt02.setEditable(false);
        txt02.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txt02.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt02.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt02MouseClicked(evt);
            }
        });

        txt11.setEditable(false);
        txt11.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txt11.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt11MouseClicked(evt);
            }
        });

        txt22.setEditable(false);
        txt22.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txt22.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt22MouseClicked(evt);
            }
        });

        txt12.setEditable(false);
        txt12.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        txt12.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txt12MouseClicked(evt);
            }
        });

        txtMessage.setEditable(false);
        txtMessage.setText("Click on a box to make a move!");

        lblP1Score.setText("You");

        lblP2Score.setText("Computer");

        txtP1Score.setEditable(false);
        txtP1Score.setText("0");

        txtP2Score.setEditable(false);
        txtP2Score.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMessage)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblP1Score)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtP1Score, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                                .addComponent(lblP2Score)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtP2Score, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt00, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                    .addComponent(txt10)
                                    .addComponent(txt20))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txt21, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(txt12, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txt22, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(txt11, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(txt01, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txt02, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(6, 6, 6)))
                .addGap(50, 50, 50))
            .addGroup(layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(lblTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt00, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt01, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt02, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt11, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt10, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt12, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt21, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt20, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt22, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblP1Score)
                    .addComponent(lblP2Score)
                    .addComponent(txtP1Score, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtP2Score, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt00MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt00MouseClicked
        if (board[0][0] == " ") {
            txtMessage.setText("Click on a box to make a move!");
            board[0][0] = player;
            txt00.setText(player);
            if (gameMethod == 0) {
                if (player == "X") {
                    player = "O";
                } else {
                    player = "X";
                }
                checkEndGame(board);
            } else if (!checkEndGame(board)) {
                compMove(board);
            }
        } else {
            txtMessage.setText("You cannot move here!");
        }
    }//GEN-LAST:event_txt00MouseClicked

    private void txt01MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt01MouseClicked
        if (board[0][1] == " ") {
            txtMessage.setText("Click on a box to make a move!");
            board[0][1] = player;
            txt01.setText(player);
            if (gameMethod == 0) {
                if (player == "X") {
                    player = "O";
                } else {
                    player = "X";
                }
                checkEndGame(board);
            } else if (!checkEndGame(board)) {
                compMove(board);
            }
        } else {
            txtMessage.setText("You cannot move here!");
        }
    }//GEN-LAST:event_txt01MouseClicked

    private void txt02MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt02MouseClicked
        if (board[0][2] == " ") {
            txtMessage.setText("Click on a box to make a move!");
            board[0][2] = player;
            txt02.setText(player);
            if (gameMethod == 0) {
                if (player == "X") {
                    player = "O";
                } else {
                    player = "X";
                }
                checkEndGame(board);
            } else if (!checkEndGame(board)) {
                compMove(board);
            }
        } else {
            txtMessage.setText("You cannot move here!");
        }
    }//GEN-LAST:event_txt02MouseClicked

    private void txt10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt10MouseClicked
        if (board[1][0] == " ") {
            txtMessage.setText("Click on a box to make a move!");
            board[1][0] = player;
            txt10.setText(player);
            if (gameMethod == 0) {
                if (player == "X") {
                    player = "O";
                } else {
                    player = "X";
                }
                checkEndGame(board);
            } else if (!checkEndGame(board)) {
                compMove(board);
            }
        } else {
            txtMessage.setText("You cannot move here!");
        }
    }//GEN-LAST:event_txt10MouseClicked

    private void txt11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt11MouseClicked
        if (board[1][1] == " ") {
            txtMessage.setText("Click on a box to make a move!");
            board[1][1] = player;
            txt11.setText(player);
            if (gameMethod == 0) {
                if (player == "X") {
                    player = "O";
                } else {
                    player = "X";
                }
                checkEndGame(board);
            } else if (!checkEndGame(board)) {
                compMove(board);
            }
        } else {
            txtMessage.setText("You cannot move here!");
        }
    }//GEN-LAST:event_txt11MouseClicked

    private void txt12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt12MouseClicked
        if (board[1][2] == " ") {
            txtMessage.setText("Click on a box to make a move!");
            board[1][2] = player;
            txt12.setText(player);
            if (gameMethod == 0) {
                if (player == "X") {
                    player = "O";
                } else {
                    player = "X";
                }
                checkEndGame(board);
            } else if (!checkEndGame(board)) {
                compMove(board);
            }
        } else {
            txtMessage.setText("You cannot move here!");
        }
    }//GEN-LAST:event_txt12MouseClicked

    private void txt20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt20MouseClicked
        if (board[2][0] == " ") {
            txtMessage.setText("Click on a box to make a move!");
            board[2][0] = player;
            txt20.setText(player);
            if (gameMethod == 0) {
                if (player == "X") {
                    player = "O";
                } else {
                    player = "X";
                }
                checkEndGame(board);
            } else if (!checkEndGame(board)) {
                compMove(board);
            }
        } else {
            txtMessage.setText("You cannot move here!");
        }
    }//GEN-LAST:event_txt20MouseClicked

    private void txt21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt21MouseClicked
        if (board[2][1] == " ") {
            txtMessage.setText("Click on a box to make a move!");
            board[2][1] = player;
            txt21.setText(player);
            if (gameMethod == 0) {
                if (player == "X") {
                    player = "O";
                } else {
                    player = "X";
                }
                checkEndGame(board);
            } else if (!checkEndGame(board)) {
                compMove(board);
            }
        } else {
            txtMessage.setText("You cannot move here!");
        }
    }//GEN-LAST:event_txt21MouseClicked

    private void txt22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txt22MouseClicked
        if (board[2][2] == " ") {
            txtMessage.setText("Click on a box to make a move!");
            board[2][2] = player;
            txt22.setText(player);
            if (gameMethod == 0) {
                if (player == "X") {
                    player = "O";
                } else {
                    player = "X";
                }
                checkEndGame(board);
            } else if (!checkEndGame(board)) {
                compMove(board);
            }
        } else {
            txtMessage.setText("You cannot move here!");
        }
    }//GEN-LAST:event_txt22MouseClicked

    /**
     * @param args the command line arguments
     */
      
    String winner = " ";
    
    String player = "X";
    
    //choose game method
    String[] gameMethodsArray = {"Multiplayer", "Against Computer"};
    int gameMethod = JOptionPane.showOptionDialog(null, "How would you like to play?", "Start Game", WIDTH, JOptionPane.QUESTION_MESSAGE, null, gameMethodsArray, gameMethodsArray[0]);

    public void compMove(String[][] board) {
        if (!checkEndGame(board)) {
            MinimaxResult result = minimax(board, false);
            executeMove(result.row, result.col);
            checkEndGame(board);
        }
    }
    
    public MinimaxResult minimax(String[][] board, boolean xTurn) {
        MinimaxResult result = new MinimaxResult();
        if (checkWinner(board).equals("X")) {
            result.bestVal = 10;
            return result;
        } else if (checkWinner(board).equals("O")) {
            result.bestVal = -10;
            return result;
        } else if (isFull(board)) {
            result.bestVal = 0;
            return result;
        } else {
            if (xTurn) {
                result.bestVal = -20;
                for (int row = 0; row < 3; row++) {
                    for (int col = 0; col < 3; col++) {
                        if (board[row][col].equals(" ")) {
                            String[][] tempBoard = duplicateBoard(board);
                            tempBoard[row][col] = "X";
                            MinimaxResult newResult = minimax(tempBoard, false);
                            if (newResult.bestVal > result.bestVal) {
                                result = newResult;
                                result.row = row;
                                result.col = col;
                            }
                        }
                    }
                }
            } else {
                result.bestVal = 20;
                for (int row = 0; row < 3; row++) {
                    for (int col = 0; col < 3; col++) {
                        if (board[row][col].equals(" ")) {
                            String[][] tempBoard = duplicateBoard(board);
                            tempBoard[row][col] = "O";
                            MinimaxResult newResult = minimax(tempBoard, true);
                            if (newResult.bestVal < result.bestVal) {
                                result = newResult;
                                result.row = row;
                                result.col = col;
                            }
                        }
                    }
                }
            }
        }
        return result;
    }
    
    public String checkWinner(String[][] board) {
        String winner = " ";
                
        for (int i = 0; i < 3; i++) {
            //check rows
            if (board[i][0].equals(board[i][1]) && board[i][0].equals(board[i][2]) && !board[i][0].equals(" ")) {
                winner = board[i][0];
            //check columns
            } else if (board[0][i].equals(board[1][i]) && board[0][i].equals(board[2][i]) && !board[0][i].equals(" ")) {
                winner = board[0][i];
            }
        }

        if (winner.equals(" ")) {
            //check a diagonal
            if (board[0][0].equals(board[1][1]) && board[0][0].equals(board[2][2]) && !board[0][0].equals(" ")) {
                winner = board[0][0];
            } //check other diagonal
            else if (board[2][0].equals(board[1][1]) && board[2][0].equals(board[0][2]) && !board[2][0].equals(" ")) {
                winner = board[2][0];
            }
        }
        
        return winner;
    }
    
    public boolean checkEndGame(String[][] board) {
        if (checkWinner(board).equals("X")) {
            txtMessage.setText("The winner is X");
            txtP1Score.setText(Integer.toString(Integer.parseInt(txtP1Score.getText()) + 1));
            newGame();
            player = "X";
            return true;
        } else if (checkWinner(board).equals("O")) {
            txtMessage.setText("The winner is O");
            txtP2Score.setText(Integer.toString(Integer.parseInt(txtP2Score.getText()) + 1));
            newGame();
            player = "X";
            return true;
        } else if (isFull(board)) {
            txtMessage.setText("The game ended in a tie!");
            newGame();
            player = "X";
            return true;
        }
        return false;
    }
    
    public void executeMove(int row, int col) {
        if (row == 0 && col == 0) {
            txt00.setText("O");
        } else if (row == 1 && col == 0) {
            txt10.setText("O");
        } else if (row == 2 && col == 0) {
            txt20.setText("O");
        } else if (row == 0 && col == 1) {
            txt01.setText("O");
        } else if (row == 1 && col == 1) {
            txt11.setText("O");
        } else if (row == 2 && col == 1) {
            txt21.setText("O");
        } else if (row == 0 && col == 2) {
            txt02.setText("O");
        } else if (row == 1 && col == 2) {
            txt12.setText("O");
        } else if (row == 2 && col == 2) {
            txt22.setText("O");
        }
        
        board[row][col] = "O";
    }
    
    public void newGame() {
        int newGame = JOptionPane.YES_NO_OPTION;
        newGame = JOptionPane.showConfirmDialog(null, "Would you like to play again?", "Tic Tac Toe", newGame);
        if (newGame == JOptionPane.YES_OPTION) {
            //reset GUI
            txt00.setText("");
            txt01.setText("");
            txt02.setText("");
            txt10.setText("");
            txt11.setText("");
            txt12.setText("");
            txt20.setText("");
            txt21.setText("");
            txt22.setText("");
            txtMessage.setText("Click on a box to make a move!");

            //reset board array
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    board[row][col] = " ";
                }
            }
            
            //reset logic
            player = "X";

        } else {
            System.exit(0);
        }
    }
    
    public void P1Multiplayer() {
        lblP1Score.setText("Player 1");
    }
    
    public void P2Multiplayer() {
        lblP2Score.setText("Player 2");
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });

        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblP1Score;
    private javax.swing.JLabel lblP2Score;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txt00;
    private javax.swing.JTextField txt01;
    private javax.swing.JTextField txt02;
    private javax.swing.JTextField txt10;
    private javax.swing.JTextField txt11;
    private javax.swing.JTextField txt12;
    private javax.swing.JTextField txt20;
    private javax.swing.JTextField txt21;
    private javax.swing.JTextField txt22;
    private javax.swing.JTextField txtMessage;
    private javax.swing.JTextField txtP1Score;
    private javax.swing.JTextField txtP2Score;
    // End of variables declaration//GEN-END:variables
}
